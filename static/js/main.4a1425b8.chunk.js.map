{"version":3,"sources":["App.js","logo.svg","reportWebVitals.js","index.js"],"names":["App","useState","oldexpression","setOldExpression","expression","setExpression","prev","setPrev","numerics","Set","operators","buttons","evalEx","evalution","eval","String","putNumerics","value","putDelete","length","slice","putOperator","handleKeyUp","event","console","log","key","has","className","tabIndex","onKeyUp","style","width","height","background","display","flexDirection","alignItems","padding","borderRadius","margin","flexWrap","map","buttonValue","idx","marginLeft","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"g6BAMA,SAASA,MACL,cAA0CC,oDAAS,KAAnD,yMAAMC,cAAN,cAAsBC,iBAAtB,cAGA,WAAgCF,oDAAS,KAAzC,0MAAKG,WAAL,cAAiBC,cAAjB,cAGA,WAAkBJ,oDAAS,OAA3B,0MAAIK,KAAJ,cAASC,QAAT,cAGKC,SAAS,IAAIC,IAAI,cACjBC,UAAW,IAAID,IAAI,SAInBE,QAAQ,CAAC,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAEtFC,OAAO,SAAPA,SAEJ,IAAIC,UAAWC,KAAKV,YACpBD,iBAAiB,SAASC,YAC1BC,cAAcU,OAAOF,YACrBN,QAAQ,QAELS,YAAY,SAASC,GAEd,OAANX,MAEDH,iBAAiBC,YAEjBC,cAAcY,IAMdZ,cAAcD,WAAaa,GAE7BV,QAAQ,QAGNW,UAAU,SAASD,GAEjBb,WAAWe,QAAQ,IAGrBd,cAAcD,WAAWgB,OAAO,EAAG,IACnCjB,iBAAiBD,cAAckB,OAAO,EAAE,KAGzCb,QAAQ,QAEPc,YAAY,SAASJ,GAEd,MAANX,MAEDD,cAAcD,WAAWa,GAE1BV,QAAQ,OAEPe,YAAY,SAASC,GAEvBC,QAAQC,IAAIF,EAAMG,KACH,cAAZH,EAAMG,IAEPR,UAAUK,EAAMG,KAIVlB,SAASmB,IAAIJ,EAAMG,KAGtBV,YAAYO,EAAMG,KAGdhB,UAAUiB,IAAIJ,EAAMG,KAG3BL,YAAYE,EAAMG,KAGA,UAAZH,EAAMG,KAEZd,UAKN,OAGE,2DAFA,CAEA,OAAKgB,UAAU,MAAMC,SAAU,EAAGC,QAASR,YAA3C,UAwBE,mEAAKS,MAAO,CACVC,MAAM,QACNC,OAAO,QACPC,WAAW,UAIXC,QAAQ,OACRC,cAAc,SACdC,WAAW,WACXC,QAAQ,OACRC,aAAa,QAXf,UAgBA,0EAAKrC,gBACL,0EAAKE,gBAKL,kEAAK2B,MAAO,CACVC,MAAM,QACNC,OAAO,QACPO,OAAO,MACPN,WAAW,UAIXC,QAAQ,OACRC,cAAc,MAEdC,WAAW,WACXC,QAAQ,OACRC,aAAa,OACbE,SAAS,QAdX,SAmBE9B,QAAQ+B,KAAI,SAASC,EAAYC,GAE9B,OAAO,qEAAQb,MAAO,CACpBC,MAAM,OACNM,QAAQ,OACRO,WAAW,OACXC,QAAS,WAEO,MAAdH,EAED/B,SAEoB,OAAd+B,EAENzB,YAIOV,SAASmB,IAAIgB,GAEpB3B,YAAY2B,GAELjC,UAAUiB,IAAIgB,IAErBtB,YAAYsB,IAtBR,SA4BLA,YAgBE3C,2B,mDChNA,K,0GCYA+C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC1D,EAAA,EAAD,MAEF2D,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4a1425b8.chunk.js","sourcesContent":["import logo from './logo.svg';\nimport './App.css';\nimport { useState } from 'react';   //this is a hook jo react mein padha huwa hai \n\n\n\nfunction App() {\n    let [ oldexpression , setOldExpression ]= useState(\"0\")\n    //this is the first part making expression use state\n    //whatever we do above now is to make the oldexpression use state is the second part\n    let [expression, setExpression]=useState(\" \")  // isko setter boltay hai \n    //filhal humney ek hook use kiya hai jiska naam hai usestate jo ek state aur state ko change ko change karnay wala \n    //function return kar key deta hai\n    let[prev,setPrev]=useState(\"ANS\"); //this is done so as to stop the occurence of plus signs 2 times \n   \n     //now inorder to allow only numerics \n     let numerics=new Set(\"0123456789\");  //Set unique value rakhnay ki madad karta hai\n     let operators =new Set(\"+-*/%\");\n      \n     //now we code for the buttons \n\n     let buttons=[\"(\",\")\",\"%\",\"AC\",\"7\",\"8\",\"9\",\"/\",\"4\",\"5\",\"6\",\"*\",\"1\",\"2\",\"3\",\"-\",\"0\",\".\",\"=\",\"+\"]\n\n     let evalEx=function()\n     {\n     let evalution= eval(expression);\n     setOldExpression(\" ans =\"+expression);\n     setExpression(String(evalution));\n     setPrev(\"ANS\");\n    } \n    let putNumerics=function(value)\n    {\n      if(prev==\"ANS\")\n      {\n        setOldExpression(expression) //here if we write setExpression(\"ans=\",expression) then only after clicking equal to we \n        //we get the answer written\n        setExpression(value); ///agar pehlay say koi answer hai aur humlog naya numeric daaltay hai then usko purana delete\n      //karna hai..uskay liyey yey condtion\n     \n      }\n      else \n      {\n        setExpression(expression + value);  ///agar setPrev(num) nahi hai then we can append \n      }\n      setPrev(\"NUM\");\n    }\n\n    let putDelete=function(value)\n    {\n       if(expression.length>=1)\n       {\n        // setExpression(expression.slice(0, -1)); for single erase\n        setExpression(expression.slice(-1, 0)); \n        setOldExpression(oldexpression.slice(-1,0))\n        \n       }\n       setPrev(\"DEL\");\n    }\n    let putOperator=function(value)\n    {\n      if(prev!=\"OP\") ///this condtion is very much important so that the operator signal comes only once even after we click many times\n      { \n        setExpression(expression+value);\n      }\n       setPrev(\"OP\");\n    }\n    let handleKeyUp=function(event)\n    {\n      console.log(event.key);\n      if(event.key===\"Backspace\")\n      {\n        putDelete(event.key);\n    \n        //  setExpression(expression.slice(0, -1));  //taaki last element ura dey humlog \n      }\n      else if(numerics.has(event.key) ) //note: earlier numerics condition and operators conditon were together now we separated\n      //this is an effort so as to not allow two operators to come together\n      {\n           putNumerics(event.key);\n        // setExpression(expression + event.key); //this is for concatenation  \n      }\n      else if( operators.has(event.key))\n      {\n        // setExpression(expression,event.key);\n        putOperator(event.key); ///humlogo nay bas har cheez kay liyey alag function bana diya \n      }\n      //this is the part after we made oldexpression use state\n      else if(event.key===\"Enter\")  //this is the main arithmetic part where we onclick of enter how we resolve \n      {\n        evalEx();\n      }\n     \n    }\n\n  return (\n    //one thing to notice here is that we are writing this in jsx format isliyey \n    //class nahi likh rahay hai className likh rahay hai\n    <div className=\"App\" tabIndex={0} onKeyUp={handleKeyUp}   //tabIndex{0} ko pehla priority uskay baad tabIndex{1}and follows\n    //tab index yey div ko focus mein laanay ka kaam karti hai\n\n    //style={{\n      //whatever we are writing here can also be written in the app.css inside .App\n      //the only thing we have to change is that here we are writing in camel case \n      //in App.css we have to write without 66 and 99 \n\n      // width:\"100%\",\n      // height:\"100vh\",\n      // background:\"#999999\",\n      // display:\"flex\",\n      // flexDirection:\"column\"\n     \n    \n      //we  copied everything to app.css \n\n\n      // what we did is we made a div an entire div and then made it flex..now looking at the\n      // google calculator we see that first there is a display and then there are buttons\n      // so in order to have row wise division we write flexDirection as column\n\n    //}}\n    >\n      <div style={{\n        width:\"400px\",\n        height:\"200px\",\n        background:\"#ffffff\",\n        //this is the part after writing h1 and h6 and we move the old and new word to the left that is on the minor axis using\n        //align items \n        //if we wanted to move in the major axis then justify content would help\n        display:\"flex\",\n        flexDirection:\"column\",\n        alignItems:\"flex-end\",\n        padding:\"20px\",\n        borderRadius:\"10px\"\n\n      }}>\n       \n\n      <h6>{oldexpression}</h6>\n      <h1>{expression}</h1>\n\n      </div>\n   \n     {/* lecture number13 starts here we make another div by just copying the above elements and then we work for putting buttons  */}\n      <div style={{\n        width:\"400px\",\n        height:\"200px\",\n        margin:\"5px\",\n        background:\"#ffffff\",\n        //this is the part after writing h1 and h6 and we move the old and new word to the left that is on the minor axis using\n        //align items \n        //if we wanted to move in the major axis then justify content would help\n        display:\"flex\",\n        flexDirection:\"row\",\n        // we changed the flex direction to row \n        alignItems:\"flex-end\",\n        padding:\"20px\",\n        borderRadius:\"10px\",\n        flexWrap:\"wrap\"\n        // when we do flexwrap=wrap then it fits onto the given div\n\n      }}>\n       \n       {buttons.map(function(buttonValue,idx)\n       {\n           return <button style={{\n             width:\"90px\",\n             padding:\"10px\",\n             marginLeft:\"8px\"\n           }}onClick={function()\n          {\n            if(buttonValue===\"=\")\n            {\n              evalEx();\n            }\n            else if(buttonValue===\"AC\")\n            {\n              putDelete();\n              // setExpression(expression.slice( -1,0)); //we copied this from line number no:34\n              //here if we do(0,-1) then one by one the value gets deleted \n            }\n            else if (numerics.has(buttonValue))\n            {\n              putNumerics(buttonValue);\n            }\n            else if (operators.has(buttonValue))\n            {\n              putOperator(buttonValue);\n            }\n          //   else{\n          //   setExpression(expression+buttonValue)\n          // }\n        }}\n           >{buttonValue}</button>       \n       })}\n      \n\n      </div>\n\n\n\n\n\n\n\n      </div>\n  );\n}\n\nexport default App;\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App / >\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}